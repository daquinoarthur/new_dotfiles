# ============================================================================
# CUSTOM THEME ZSH CONFIGURATION (Cross-Platform)
# ============================================================================
# A beautiful, well-organized zsh configuration with custom theming
# Supports both macOS and Linux environments

# ============================================================================
# üé® OH-MY-ZSH CONFIGURATION  
# ============================================================================

# Path to oh-my-zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Theme configuration - Custom theme (renamed from Tokyo Night)
ZSH_THEME="custom"

# Plugins (keep minimal for performance)
plugins=(git zsh-autosuggestions zsh-syntax-highlighting)

# Load oh-my-zsh
source $ZSH/oh-my-zsh.sh

# ============================================================================
# ‚öôÔ∏è  CORE SYSTEM SETTINGS
# ============================================================================

# Vi mode settings
set -o vi
export EDITOR=vi
export VISUAL=vi

# Basic PATH configuration
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"

# Detect OS for platform-specific configurations
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS specific configurations
    export PATH="$PATH:$HOME/Library/Python/3.9/bin"
    export PATH="$PATH:/opt/homebrew/bin/"
    
    # Homebrew
    if [[ -f "/opt/homebrew/bin/brew" ]]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Linux specific configurations
    export PATH="/usr/local/go/bin:$PATH"
fi

# ============================================================================
# üîß DEVELOPMENT ENVIRONMENT
# ============================================================================

# Node.js / NVM
export NVM_DIR="$HOME/.nvm"

# Load NVM (platform-agnostic)
if [[ -s "$NVM_DIR/nvm.sh" ]]; then
    source "$NVM_DIR/nvm.sh"
elif [[ -s "/opt/homebrew/opt/nvm/nvm.sh" ]]; then
    source "/opt/homebrew/opt/nvm/nvm.sh"
fi

# Load NVM bash completion (platform-agnostic)
if [[ -s "$NVM_DIR/bash_completion" ]]; then
    source "$NVM_DIR/bash_completion"
elif [[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ]]; then
    source "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"
fi

# Auto-load Node version from .nvmrc (only if nvm is available)
if command -v nvm &> /dev/null; then
    autoload -U add-zsh-hook
    load-nvmrc() {
        local nvmrc_path="$(nvm_find_nvmrc)"
        if [ -n "$nvmrc_path" ]; then
            local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")
            local node_version=$(nvm version)
            if [ "$nvmrc_node_version" = "N/A" ]; then
                nvm install
            elif [ "$nvmrc_node_version" != "$node_version" ]; then
                nvm use
            fi
        elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$node_version" != "$(nvm version default)" ]; then
            nvm use default
        fi
    }
    add-zsh-hook chpwd load-nvmrc
    load-nvmrc
fi

# Python / Pyenv
export PYENV_ROOT="$HOME/.pyenv"
if [[ -d "$PYENV_ROOT/bin" ]]; then
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
fi

# Go
export GOPATH="$HOME/go"
export PATH="$GOPATH/bin:$PATH"

# ============================================================================
# üé® TERMINAL ENHANCEMENTS
# ============================================================================

# FZF configuration
if command -v fzf &> /dev/null; then
    # FZF key bindings and completion
    if [[ "$OSTYPE" == "darwin"* ]] && [[ -f "$HOME/.fzf.zsh" ]]; then
        source "$HOME/.fzf.zsh"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux FZF setup - Ubuntu/Debian paths
        if [[ -f "/usr/share/doc/fzf/examples/key-bindings.zsh" ]]; then
            source /usr/share/doc/fzf/examples/key-bindings.zsh
        fi
        if [[ -f "/usr/share/doc/fzf/examples/completion.zsh" ]]; then
            source /usr/share/doc/fzf/examples/completion.zsh
        fi
        # Alternative paths for other distros
        if [[ -f "/usr/share/fzf/key-bindings.zsh" ]]; then
            source /usr/share/fzf/key-bindings.zsh
        fi
        if [[ -f "/usr/share/fzf/completion.zsh" ]]; then
            source /usr/share/fzf/completion.zsh
        fi
    fi
    
    # FZF colors (custom theme with transparency)
    export FZF_DEFAULT_OPTS="
        --color=fg:#c0caf5,bg:-1,hl:#bb9af7
        --color=fg+:#c0caf5,bg+:-1,hl+:#7dcfff
        --color=info:#7aa2f7,prompt:#7dcfff,pointer:#f7768e
        --color=marker:#9ece6a,spinner:#f7768e,header:#9ece6a
        --border=rounded
        --height=40%
        --layout=reverse
        --prompt='‚ùØ '
        --pointer='‚ñ∂'
        --marker='‚úì'"
fi

# Bat (better cat) configuration
if command -v bat &> /dev/null; then
    export BAT_THEME="base16"
    alias cat="bat"
fi

# Eza (better ls) configuration
if command -v eza &> /dev/null; then
    alias ls="eza --color=always --group-directories-first"
    alias ll="eza -la --color=always --group-directories-first"
    alias la="eza -a --color=always --group-directories-first"
    alias lt="eza --tree --color=always --group-directories-first"
elif command -v exa &> /dev/null; then
    alias ls="exa --color=always --group-directories-first"
    alias ll="exa -la --color=always --group-directories-first"
    alias la="exa -a --color=always --group-directories-first"
    alias lt="exa --tree --color=always --group-directories-first"
fi

# ============================================================================
# üîß CUSTOM ALIASES AND FUNCTIONS
# ============================================================================

# Git aliases
alias gs="git status"
alias ga="git add"
alias gc="git commit"
alias gp="git push"
alias gl="git pull"
alias gd="git diff"
alias gco="git checkout"

# Navigation aliases
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."

# Utility aliases
alias v="vim"
alias lg="lazygit"
alias c="clear"
alias h="history"

# Custom functions
# Quick file finder with vim
vf() {
    local file
    file=$(find . -type f | fzf --preview 'bat --color=always {}' 2>/dev/null)
    [[ -n $file ]] && vim "$file"
}

# Git branch selector (renamed to avoid conflict with oh-my-zsh git plugin)
gbr() {
    local branch
    branch=$(git branch -a | fzf | sed 's/^[ \t]*//' | sed 's/remotes\/origin\///')
    [[ -n $branch ]] && git checkout "$branch"
}

# Quick directory changer
fd() {
    local dir
    dir=$(find . -type d | fzf)
    [[ -n $dir ]] && cd "$dir"
}

# ============================================================================
# üéØ TMUX INTEGRATION
# ============================================================================

# Tmux session manager integration
export PATH="$HOME/.tmux/plugins/t-smart-tmux-session-manager/bin:$PATH"
export PATH="$HOME/.config/tmux/plugins/t-smart-tmux-session-manager/bin:$PATH"

# Auto-attach to tmux session if available and not already in tmux
if command -v tmux &> /dev/null && [[ -z "$TMUX" ]] && [[ "$TERM_PROGRAM" != "vscode" ]]; then
    # Check if there are any tmux sessions
    if tmux list-sessions &> /dev/null; then
        # Attach to the first available session
        tmux attach-session -t $(tmux list-sessions -F "#{session_name}" | head -1)
    fi
fi

# ============================================================================
# üåà FINAL TOUCHES
# ============================================================================

# Enable syntax highlighting
if [[ -f "$ZSH/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]]; then
    source "$ZSH/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi

# Custom prompt additions (if not using oh-my-zsh theme)
if [[ -z "$ZSH_THEME" ]] || [[ "$ZSH_THEME" == "" ]]; then
    # Simple custom prompt
    PROMPT='%F{blue}%~%f %F{green}‚ùØ%f '
fi

# Load local customizations if they exist
[[ -f "$HOME/.zshrc.local" ]] && source "$HOME/.zshrc.local"